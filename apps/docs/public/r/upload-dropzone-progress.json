{
  "name": "upload-dropzone-progress",
  "type": "registry:ui",
  "dependencies": [
    "better-upload",
    "lucide-react",
    "react-dropzone"
  ],
  "registryDependencies": [
    "progress"
  ],
  "files": [
    {
      "path": "upload-dropzone-progress.tsx",
      "content": "import { cn } from '@/lib/utils';\r\nimport { type UploadedFile, useUploadFiles } from 'better-upload/client';\r\nimport { readableBytes } from 'better-upload/client/helpers';\r\nimport { Dot, File, Upload } from 'lucide-react';\r\nimport { useId, useState } from 'react';\r\nimport { useDropzone } from 'react-dropzone';\r\nimport { Progress } from './progress';\r\n\r\ntype UploadDropzoneProgressProps = Parameters<typeof useUploadFiles>[0] & {\r\n  accept?: string;\r\n  metadata?: Record<string, unknown>;\r\n\r\n  description?:\r\n    | {\r\n        fileTypes?: string;\r\n        maxFileSize?: string;\r\n        maxFiles?: number;\r\n      }\r\n    | string;\r\n\r\n  resetAfterSettled?: boolean;\r\n\r\n  // Add any additional props you need.\r\n};\r\n\r\nexport function UploadDropzoneProgress({\r\n  accept,\r\n  metadata,\r\n  description,\r\n  resetAfterSettled,\r\n  ...params\r\n}: UploadDropzoneProgressProps) {\r\n  const id = useId();\r\n\r\n  const [progresses, setProgresses] = useState<\r\n    { file: Omit<UploadedFile, 'raw'>; progress: number }[]\r\n  >([]);\r\n\r\n  const { upload, reset, isPending } = useUploadFiles({\r\n    ...params,\r\n    onUploadSettled: () => {\r\n      if (inputRef.current) {\r\n        inputRef.current.value = '';\r\n      }\r\n\r\n      if (resetAfterSettled) {\r\n        setProgresses([]);\r\n        reset();\r\n      }\r\n\r\n      params.onUploadSettled?.();\r\n    },\r\n    onBeforeUpload: (args) => {\r\n      setProgresses([]);\r\n\r\n      return params.onBeforeUpload?.(args);\r\n    },\r\n    onUploadProgress: ({ file, progress }) => {\r\n      setProgresses((prev) => {\r\n        const existing = prev.find((p) => p.file.objectKey === file.objectKey);\r\n        if (existing) {\r\n          return prev.map((p) =>\r\n            p.file.objectKey === file.objectKey ? { ...p, progress } : p\r\n          );\r\n        }\r\n\r\n        return [...prev, { file, progress }];\r\n      });\r\n\r\n      params.onUploadProgress?.({ file, progress });\r\n    },\r\n  });\r\n\r\n  const { getRootProps, getInputProps, isDragActive, inputRef } = useDropzone({\r\n    onDrop: (files) => {\r\n      if (files.length > 0) {\r\n        upload(files, { metadata });\r\n      }\r\n    },\r\n    noClick: true,\r\n  });\r\n\r\n  return (\r\n    <div className=\"flex flex-col gap-3\">\r\n      <div\r\n        className={cn(\r\n          'relative rounded-lg border border-dashed transition-colors',\r\n          {\r\n            'border-primary/70': isDragActive,\r\n          }\r\n        )}\r\n      >\r\n        <label\r\n          {...getRootProps()}\r\n          className={cn(\r\n            'bg-muted/5 dark:bg-background flex w-full min-w-80 cursor-pointer flex-col items-center justify-center rounded-lg px-2 py-6 transition-colors',\r\n            {\r\n              'bg-muted/20 text-muted-foreground cursor-not-allowed': isPending,\r\n              'hover:dark:bg-muted/15 hover:bg-muted/30': !isPending,\r\n            }\r\n          )}\r\n          htmlFor={id}\r\n        >\r\n          <div className=\"my-2\">\r\n            <Upload className=\"size-6\" />\r\n          </div>\r\n\r\n          <div className=\"mt-3 space-y-1 text-center\">\r\n            <p className=\"text-sm font-semibold\">Drag and drop files here</p>\r\n\r\n            <p className=\"text-muted-foreground max-w-64 text-xs\">\r\n              {typeof description === 'string' ? (\r\n                description\r\n              ) : (\r\n                <>\r\n                  {description?.maxFiles &&\r\n                    `You can upload ${description.maxFiles} file${description.maxFiles !== 1 ? 's' : ''}.`}{' '}\r\n                  {description?.maxFileSize &&\r\n                    `${description.maxFiles !== 1 ? 'Each u' : 'U'}p to ${description.maxFileSize}.`}{' '}\r\n                  {description?.fileTypes &&\r\n                    `Accepted ${description.fileTypes}.`}\r\n                </>\r\n              )}\r\n            </p>\r\n          </div>\r\n\r\n          <input\r\n            {...getInputProps()}\r\n            type=\"file\"\r\n            multiple\r\n            id={id}\r\n            accept={accept}\r\n            disabled={isPending}\r\n          />\r\n        </label>\r\n\r\n        {isDragActive && (\r\n          <div className=\"bg-background pointer-events-none absolute inset-0 rounded-lg\">\r\n            <div className=\"bg-muted/15 flex size-full flex-col items-center justify-center rounded-lg\">\r\n              <div className=\"my-2\">\r\n                <Upload className=\"size-6\" />\r\n              </div>\r\n\r\n              <p className=\"mt-3 text-sm font-semibold\">Drop files here</p>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      <div className=\"flex flex-col gap-2\">\r\n        {progresses.map((progress) => (\r\n          <div\r\n            key={progress.file.objectKey}\r\n            className=\"flex flex-col gap-2.5 rounded-lg border p-3\"\r\n          >\r\n            <div className=\"flex items-center gap-2\">\r\n              <FileIcon type={progress.file.type} />\r\n\r\n              <div className=\"space-y-1\">\r\n                <p className=\"text-sm font-medium\">{progress.file.name}</p>\r\n\r\n                <div className=\"flex items-center gap-0.5 text-xs\">\r\n                  <p className=\"text-muted-foreground\">\r\n                    {readableBytes(progress.file.size)}\r\n                  </p>\r\n\r\n                  <Dot className=\"text-muted-foreground size-4\" />\r\n\r\n                  <p>\r\n                    {progress.progress < 1\r\n                      ? `${(progress.progress * 100).toFixed(0)}%`\r\n                      : 'Completed'}\r\n                  </p>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            {progress.progress < 1 && (\r\n              <Progress className=\"h-1.5\" value={progress.progress * 100} />\r\n            )}\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst iconCaptions = {\r\n  'image/': 'IMG',\r\n  'video/': 'VID',\r\n  'audio/': 'AUD',\r\n  'application/pdf': 'PDF',\r\n  'application/zip': 'ZIP',\r\n  'application/x-rar-compressed': 'RAR',\r\n  'application/x-7z-compressed': '7Z',\r\n  'application/x-tar': 'TAR',\r\n  'application/json': 'JSON',\r\n  'application/javascript': 'JS',\r\n  'text/plain': 'TXT',\r\n  'text/csv': 'CSV',\r\n  'text/html': 'HTML',\r\n  'text/css': 'CSS',\r\n  'application/xml': 'XML',\r\n  'application/x-sh': 'SH',\r\n  'application/x-python-code': 'PY',\r\n  'application/x-executable': 'EXE',\r\n  'application/x-disk-image': 'ISO',\r\n};\r\n\r\nfunction FileIcon({ type }: { type: string }) {\r\n  const caption = Object.entries(iconCaptions).find(([key]) =>\r\n    type.startsWith(key)\r\n  )?.[1];\r\n\r\n  return (\r\n    <div className=\"relative shrink-0\">\r\n      <File className=\"text-muted-foreground size-12\" strokeWidth={1} />\r\n\r\n      {caption && (\r\n        <span className=\"bg-primary text-primary-foreground absolute bottom-2.5 left-0.5 select-none rounded px-1 py-px text-xs font-semibold\">\r\n          {caption}\r\n        </span>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}